version: 2
jobs:
  test:
    working_directory: /go/src/github.com/daisuke310vvv/circleci-2.0
    docker:
      - image: circleci/golang:1.8.1
      - image: mysql:5.7.18
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: password
    steps:
      - checkout
      - run:
          name: Install dockerize
          command: |
              wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
              tar -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
              rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
              DOCKERIZE_VERSION: v0.5.0
      - run:
          name: Wait for db
          command: |
              dockerize -wait tcp://localhost:3306 -timeout 1m
      - restore_cache:
          keys:
              - glide-cache-{{ checksum "glide.lock" }}
      - run:
          name: Install dependencies if not cached
          command: |
              if [ -d ./vendor ]; then
                  echo "vendor directory found"
              else
                  echo "vendor directory not found"
                  sudo apt-get install -y curl
                  curl https://glide.sh/get | sh
                  glide install
              fi
      - save_cache:
          key: glide-cache-{{ checksum "glide.lock" }}
          paths:
              - vendor
      - run:
          name: Test
          command: |
            go test test/* -v
  build:
    working_directory: /go/src/github.com/daisuke310vvv/circleci-2.0
    docker:
      - image: circleci/golang:1.8.1
    steps:
      - checkout
      - run: mkdir -p workspace
      - run: go build -o workspace/server
      - run: cp Dockerfile workspace/Dockerfile
      - persist_to_workspace:
          root: workspace
          paths:
            - server
            - Dockerfile
  docker-deploy:
    working_directory: /go/src/github.com/daisuke310vvv/circleci-2.0
    docker:
      - image: circleci/golang:1.8.1
    steps:
      - attach_workspace:
          at: workspace
      - run: |
          ls
          ls workspace

workflows:
  version: 2
  after-test:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
